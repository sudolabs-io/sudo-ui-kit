{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "description": "A collapsible accordion component with multiple variants and ARIA support",
  "dependencies": [
    "@radix-ui/react-accordion@1.2.3",
    "class-variance-authority@0.7.1",
    "react-icons@5.5.0"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/ui/accordion.tsx",
      "content": "import * as React from 'react'\nimport { HiChevronDown } from 'react-icons/hi'\nimport { TbQuestionMark } from 'react-icons/tb'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from 'lib/utils'\n\ntype AccordionVariant = 'flush' | 'default' | 'separated'\n\nconst accordionVariants = {\n  root: cva('text-foreground', {\n    variants: {\n      variant: {\n        flush: '',\n        default: '',\n        separated: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }),\n  item: cva('', {\n    variants: {\n      variant: {\n        flush: 'group border-b border-border last:border-b-0',\n        default: '',\n        separated: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }),\n  trigger: cva('', {\n    variants: {\n      variant: {\n        flush: '[&>div>svg]:text-foreground [&>svg]:text-foreground',\n        default: '',\n        separated: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }),\n  content: cva('', {\n    variants: {\n      variant: {\n        flush: 'border-t border-border group-last:border-t-0',\n        default: '',\n        separated: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }),\n}\n\nconst AccordionContext = React.createContext<AccordionVariant>('default')\n\nconst Accordion = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> &\n    VariantProps<typeof accordionVariants.root>\n>(({ className, variant, ...props }, ref) => (\n  <AccordionContext.Provider value={variant || 'default'}>\n    <AccordionPrimitive.Root\n      ref={ref}\n      className={cn(accordionVariants.root({ variant }), className)}\n      {...props}\n    />\n  </AccordionContext.Provider>\n))\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  const variant = React.useContext(AccordionContext)\n\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn(accordionVariants.item({ variant }), className)}\n      {...props}\n    />\n  )\n})\nAccordionItem.displayName = 'AccordionItem'\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => {\n  const variant = React.useContext(AccordionContext)\n\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        ref={ref}\n        className={cn(\n          accordionVariants.trigger({ variant }),\n          'flex flex-1 items-center text-lg justify-between py-5 font-medium transition-all [&[data-state=open]>svg]:rotate-180',\n          className,\n        )}\n        {...props}\n      >\n        <div className=\"flex items-center gap-2\">\n          <TbQuestionMark className=\"h-6 w-6 shrink-0 transition-all\" />\n          {children}\n        </div>\n        <HiChevronDown className=\"h-6 w-6 shrink-0 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n})\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const variant = React.useContext(AccordionContext)\n\n  return (\n    <AccordionPrimitive.Content\n      ref={ref}\n      className={cn(\n        accordionVariants.content({ variant }),\n        'overflow-hidden text-base transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down',\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"py-5\">{children}</div>\n    </AccordionPrimitive.Content>\n  )\n})\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } ",
      "type": "registry:ui",
      "target": "components/ui/accordion.tsx"
    },
    {
      "path": "src/components/ui/accordion.stories.tsx",
      "content": "import { Meta, StoryObj } from '@storybook/react'\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from './accordion'\n\nconst AccordionStory = () => (\n  <Accordion variant=\"flush\" type=\"single\" collapsible className=\"w-full\">\n    <AccordionItem value=\"item-1\">\n      <AccordionTrigger>Is it accessible?</AccordionTrigger>\n      <AccordionContent>Yes. It adheres to the WAI-ARIA design pattern.</AccordionContent>\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      <AccordionTrigger>Is it styled?</AccordionTrigger>\n      <AccordionContent>\n        Yes. It comes with default styles that matches the other components&apos; aesthetic.\n      </AccordionContent>\n    </AccordionItem>\n    <AccordionItem value=\"item-3\">\n      <AccordionTrigger>Is it animated?</AccordionTrigger>\n      <AccordionContent>\n        Yes. It&apos;s animated by default, but you can disable it if you prefer.\n      </AccordionContent>\n    </AccordionItem>\n  </Accordion>\n)\n\ntype Story = StoryObj<typeof AccordionStory>\n\nexport const Default: Story = {\n  render: () => <AccordionStory />,\n}\n\nconst meta: Meta<typeof AccordionStory> = {\n  title: 'Components/Accordion/Accordion',\n  component: AccordionStory,\n}\n\nexport default meta ",
      "type": "registry:ui",
      "target": "components/ui/accordion.stories.tsx"
    }
  ],
  "docs": "Use the accordion component to display collapsible content panels with various styling variants",
  "categories": [
    "UI",
    "Layout"
  ]
}