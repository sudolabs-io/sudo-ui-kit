{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "description": "A customizable button component with different variants, sizes, and icon options",
  "dependencies": [
    "class-variance-authority@0.7.1",
    "@radix-ui/react-slot@1.1.2"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/LoaderIcon.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/IconTypes.json"
  ],
  "files": [
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from 'lib/utils'\nimport { LoaderIcon } from 'components/icons/LoaderIcon'\nimport { IconProps } from 'components/icons/types'\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center gap-2 text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n        unstyled: '',\n      },\n      size: {\n        xs: 'h-[34px] px-3 py-2 text-xs',\n        sm: 'h-[37px] px-3 py-2 text-sm',\n        base: 'h-[42px] px-5 py-2.5 text-sm',\n        l: 'h-[48px] px-5 py-3 text-base',\n        xl: 'h-[52px] px-6 py-3.5 text-base',\n        'icon-xs': 'h-5 w-5 p-1',\n        'icon-sm': 'p-2',\n        'icon-base': 'p-2.5',\n        'icon-l': 'p-3',\n        'icon-xl': 'p-3.5',\n      },\n      iconOnly: {\n        false: 'rounded-lg',\n        square: 'rounded-md',\n        circle: 'rounded-full',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'base',\n      iconOnly: false,\n    },\n  },\n)\n\nconst iconVariants = cva('inline-block items-center justify-center', {\n  variants: {\n    size: {\n      xs: 'h-[18px] w-[18px]',\n      sm: 'h-[18px] w-[18px]',\n      base: 'h-[21px] w-[21px]',\n      l: 'h-[24px] w-[24px]',\n      xl: 'h-[24px] w-[24px]',\n      'icon-xs': 'h-3 w-3',\n      'icon-sm': 'h-3 w-3',\n      'icon-base': 'h-[14px] w-[14px]',\n      'icon-l': 'h-4 w-4',\n      'icon-xl': 'h-4 w-4',\n    },\n  },\n  defaultVariants: {\n    size: 'base',\n  },\n})\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  leftIcon?: React.FC<IconProps>\n  rightIcon?: React.FC<IconProps>\n  icon?: React.FC<IconProps>\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      iconOnly,\n      asChild = false,\n      isLoading,\n      leftIcon: LeftIcon,\n      rightIcon: RightIcon,\n      icon: Icon,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : 'button'\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className, iconOnly }))}\n        ref={ref}\n        {...props}\n      >\n        {isLoading && <LoaderIcon className=\"h-4 w-4 animate-spin\" />}\n        {typeof LeftIcon !== 'undefined' && !isLoading && (\n          <LeftIcon className={cn(iconVariants({ size, className }))} />\n        )}\n        {props.children}\n        {typeof RightIcon !== 'undefined' && !isLoading && (\n          <RightIcon className={cn(iconVariants({ size, className }))} />\n        )}\n        {typeof Icon !== 'undefined' && !isLoading && (\n          <Icon className={cn(iconVariants({ size, className }))} />\n        )}\n      </Comp>\n    )\n  },\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": "components/ui/button.tsx"
    },
    {
      "path": "src/components/ui/buttonStories/variants.stories.tsx",
      "content": "import { Meta, StoryObj } from '@storybook/react'\nimport { Button, ButtonProps } from '../button'\n\ninterface Props extends ButtonProps {}\n\nconst ButtonStory = (props: Props) => <Button {...props}>Click me</Button>\n\ntype Story = StoryObj<typeof meta>\n\nexport const Default: Story = {\n  args: {\n    variant: 'default',\n  },\n}\n\nexport const Destructive: Story = {\n  args: {\n    variant: 'destructive',\n  },\n}\n\nexport const Outline: Story = {\n  args: {\n    variant: 'outline',\n  },\n}\n\nexport const Secondary: Story = {\n  args: {\n    variant: 'secondary',\n  },\n}\n\nexport const Ghost: Story = {\n  args: {\n    variant: 'ghost',\n  },\n}\n\nexport const Link: Story = {\n  args: {\n    variant: 'link',\n  },\n}\n\nconst meta: Meta<typeof ButtonStory> = {\n  title: 'Components/Button/Variants',\n  component: ButtonStory,\n  argTypes: {\n    variant: { options: ['default', 'destructive', 'outline', 'secondary', 'ghost', 'link'] },\n  },\n  render: (args) => <ButtonStory {...args} />,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/buttonStories/variants.stories.tsx"
    },
    {
      "path": "src/components/ui/buttonStories/loading.stories.tsx",
      "content": "import { Meta, StoryObj } from '@storybook/react'\nimport { Button, ButtonProps } from '../button'\n\ninterface Props extends ButtonProps {}\n\nconst ButtonStory = (props: Props) => <Button {...props}>Click me</Button>\n\ntype Story = StoryObj<typeof meta>\n\nexport const Default: Story = {\n  args: {\n    isLoading: true,\n  },\n}\n\nconst meta: Meta<typeof ButtonStory> = {\n  title: 'Components/Button/Loading',\n  component: ButtonStory,\n  argTypes: {\n    size: {\n      options: ['xs', 'sm', 'base', 'l', 'xl'],\n    },\n    iconOnly: { options: [false, 'square', 'circle'] },\n  },\n  render: (args) => <ButtonStory {...args} />,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/buttonStories/loading.stories.tsx"
    },
    {
      "path": "src/components/ui/buttonStories/textOnly.stories.tsx",
      "content": "import { Meta, StoryObj } from '@storybook/react'\nimport { Button, ButtonProps } from '../button'\n\ninterface Props extends ButtonProps {}\n\nconst ButtonStory = (props: Props) => <Button {...props}>Click me</Button>\n\ntype Story = StoryObj<typeof meta>\n\nexport const SizeXs: Story = {\n  args: {\n    size: 'xs',\n  },\n}\n\nexport const SizeSm: Story = {\n  args: {\n    size: 'sm',\n  },\n}\n\nexport const SizeBase: Story = {\n  args: {\n    size: 'base',\n  },\n}\n\nexport const SizeL: Story = {\n  args: {\n    size: 'l',\n  },\n}\n\nexport const SizeXl: Story = {\n  args: {\n    size: 'xl',\n  },\n}\n\nconst meta: Meta<typeof ButtonStory> = {\n  title: 'Components/Button/Text Only',\n  component: ButtonStory,\n  argTypes: {\n    size: { options: ['xs', 'sm', 'base', 'l', 'xl'] },\n  },\n  render: (args) => <ButtonStory {...args} />,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/buttonStories/textOnly.stories.tsx"
    },
    {
      "path": "src/components/ui/buttonStories/textWithIcon.stories.tsx",
      "content": "import { Meta, StoryObj } from '@storybook/react'\nimport { UserIcon } from 'components/icons'\nimport { Button, ButtonProps } from '../button'\n\ntype Story = StoryObj<typeof meta>\n\ninterface Props extends ButtonProps {}\n\nconst ButtonStory = (props: Props) => <Button {...props}>Click me</Button>\n\nexport const LeftIconXs: Story = {\n  args: {\n    size: 'xs',\n    leftIcon: UserIcon,\n  },\n}\n\nexport const LeftIconSm: Story = {}\nLeftIconSm.args = {\n  ...LeftIconXs.args,\n  size: 'sm',\n}\n\nexport const LeftIconBase: Story = {}\nLeftIconBase.args = {\n  ...LeftIconSm.args,\n  size: 'base',\n}\n\nexport const LeftIconL: Story = {}\nLeftIconL.args = {\n  ...LeftIconBase.args,\n  size: 'l',\n}\n\nexport const LeftIconXl: Story = {}\nLeftIconXl.args = {\n  ...LeftIconL.args,\n  size: 'xl',\n}\n\nexport const RightIconXs: Story = {\n  args: {\n    size: 'xs',\n    rightIcon: UserIcon,\n  },\n}\n\nexport const RightIconSm: Story = {}\nRightIconSm.args = {\n  ...RightIconXs.args,\n  size: 'sm',\n}\n\nexport const RightIconBase: Story = {}\nRightIconBase.args = {\n  ...RightIconSm.args,\n  size: 'base',\n}\n\nexport const RightIconL: Story = {}\nRightIconL.args = {\n  ...RightIconBase.args,\n  size: 'l',\n}\n\nexport const RightIconXl: Story = {}\nRightIconXl.args = {\n  ...RightIconL.args,\n  size: 'xl',\n}\n\nconst meta: Meta<typeof ButtonStory> = {\n  title: 'Components/Button/Text With Icon',\n  component: ButtonStory,\n  argTypes: {\n    size: { options: ['xs', 'sm', 'base', 'l', 'xl'] },\n  },\n  render: (args) => <ButtonStory {...args} />,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/buttonStories/textWithIcon.stories.tsx"
    },
    {
      "path": "src/components/ui/buttonStories/iconOnly.stories.tsx",
      "content": "import { Meta, StoryObj } from '@storybook/react'\nimport { UserIcon } from 'components/icons'\nimport { Button, ButtonProps } from '../button'\n\ninterface Props extends ButtonProps {}\n\nconst ButtonStory = (props: Props) => <Button {...props} />\n\ntype Story = StoryObj<typeof meta>\n\nexport const SquareXs: Story = {\n  args: {\n    size: 'icon-xs',\n    icon: UserIcon,\n    iconOnly: 'square',\n  },\n}\n\nexport const SquareSm: Story = {}\nSquareSm.args = {\n  ...SquareXs.args,\n  size: 'icon-sm',\n}\n\nexport const SquareBase: Story = {}\nSquareBase.args = {\n  ...SquareSm.args,\n  size: 'icon-base',\n}\n\nexport const SquareL: Story = {}\nSquareL.args = {\n  ...SquareBase.args,\n  size: 'icon-l',\n}\n\nexport const SquareXl: Story = {}\nSquareXl.args = {\n  ...SquareL.args,\n  size: 'icon-xl',\n}\n\nexport const CircleXs: Story = {\n  args: {\n    size: 'icon-xs',\n    rightIcon: UserIcon,\n    iconOnly: 'circle',\n  },\n}\n\nexport const CircleSm: Story = {}\nCircleSm.args = {\n  ...CircleXs.args,\n  size: 'icon-sm',\n}\n\nexport const CircleBase: Story = {}\nCircleBase.args = {\n  ...CircleSm.args,\n  size: 'icon-base',\n}\n\nexport const CircleL: Story = {}\nCircleL.args = {\n  ...CircleBase.args,\n  size: 'icon-l',\n}\n\nexport const CircleXl: Story = {}\nCircleXl.args = {\n  ...CircleL.args,\n  size: 'icon-xl',\n}\n\nconst meta: Meta<typeof ButtonStory> = {\n  title: 'Components/Button/Icon Only',\n  component: ButtonStory,\n  argTypes: {\n    size: { options: ['icon-xs', 'icon-sm', 'icon-base', 'icon-l', 'icon-xl'] },\n    iconOnly: { options: [false, 'square', 'circle'] },\n  },\n  render: (args) => <ButtonStory {...args} />,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/buttonStories/iconOnly.stories.tsx"
    }
  ],
  "docs": "Use the button component for user interactions like form submissions and actions",
  "categories": [
    "UI",
    "Forms"
  ]
}