{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "description": "An input component with support for icons and clearable functionality",
  "dependencies": [
    "class-variance-authority@0.7.1",
    "react-hook-form@7.54.2"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/form.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/CloseIcon.json"
  ],
  "files": [
    {
      "path": "src/components/ui/input.tsx",
      "content": "import * as React from 'react'\nimport { useFormContext } from 'react-hook-form'\nimport { cva, VariantProps } from 'class-variance-authority'\nimport { cn } from 'lib/utils'\nimport { CloseIcon } from 'components/icons'\nimport { useFormField } from './form'\n\nconst inputWrapperVariants = cva('flex items-center', {\n  variants: {\n    size: {\n      sm: 'h-[37px] text-sm',\n      md: 'h-[42px] text-sm',\n      lg: 'h-[52px] text-base',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n})\n\nexport type InputProps = Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> &\n  VariantProps<typeof inputWrapperVariants> & {\n    icon?: React.ReactNode\n    clearable?: boolean\n    wrapperClassName?: string\n  }\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, value, type, size, icon, clearable, wrapperClassName = '', ...props }, ref) => {\n    const { resetField, getFieldState } = useFormContext()\n    const { name } = useFormField()\n    const { invalid } = getFieldState(name)\n\n    return (\n      <div>\n        <div\n          className={cn(\n            'flex items-center overflow-hidden border rounded-lg border-input',\n            'focus-within:ring-1 focus-within:ring-ring focus-within:ring-offset-2',\n            invalid && 'border-red-500 focus-within:border-red-500',\n            inputWrapperVariants({ size }),\n            wrapperClassName,\n          )}\n        >\n          {icon && (\n            <div\n              className={cn(\n                'text-foreground ps-4 h-full flex items-center justify-center shrink-0',\n              )}\n            >\n              {icon}\n            </div>\n          )}\n          <input\n            formNoValidate\n            value={value}\n            type={type}\n            className={cn(\n              'flex w-full h-full bg-background text-foreground px-4 py-2 placeholder:text-muted-foreground',\n              'focus-visible:outline-none',\n              'disabled:placeholder-muted-foreground disabled:text-muted-foreground disabled:cursor-not-allowed',\n              icon && 'ps-2.5',\n              className,\n            )}\n            ref={ref}\n            {...props}\n          />\n          {clearable && value && (\n            <div className={cn('pe-4 h-full flex items-center justify-center shrink-0')}>\n              <CloseIcon\n                onClick={() => resetField(name)}\n                className=\"h-5 w-5 shrink-0 cursor-pointer text-foreground\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  },\n)\nInput.displayName = 'Input'\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": "components/ui/input.tsx"
    },
    {
      "path": "src/components/ui/input.stories.tsx",
      "content": "import { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { Meta, StoryObj } from '@storybook/react'\nimport { z } from 'zod'\nimport { UserIcon } from 'components/icons'\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from './form'\nimport { Input } from './input'\n\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Enter a valid email address.' }),\n})\n\ntype Props = {\n  size: 'sm' | 'md' | 'lg'\n  clearable: boolean\n  icon: boolean\n  tooltip: string\n  required: boolean\n}\n\nconst InputStory = ({ size, clearable, icon, tooltip, required }: Props) => {\n  const formMethods = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n    },\n    mode: 'onChange',\n  })\n  return (\n    <Form {...formMethods}>\n      <form\n        className=\"\"\n        onSubmit={(e) => {\n          e.preventDefault()\n          void formMethods.handleSubmit((formData) => console.log(formData))\n        }}\n      >\n        <FormField\n          required={required}\n          name=\"email\"\n          control={formMethods.control}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel tooltip={tooltip}>Email address</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  type=\"email\"\n                  size={size}\n                  icon={icon && <UserIcon className=\"h-5 w-5\" />}\n                  placeholder=\"Enter your email address\"\n                  clearable={clearable}\n                />\n              </FormControl>\n              {/* TODO do we want form message here? */}\n              <FormDescription>We&apos;ll never share your personal information</FormDescription>\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  )\n}\n\ntype Story = StoryObj<typeof meta>\n\nexport const Default: Story = {\n  args: {\n    clearable: true,\n    size: 'md',\n    icon: true,\n    tooltip: 'Enter valid email address.',\n    required: true,\n  },\n}\n\nconst meta: Meta<typeof InputStory> = {\n  title: 'Components/Input/Input',\n  component: InputStory,\n  argTypes: {\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\n    clearable: { control: 'boolean' },\n    icon: { control: 'boolean' },\n    tooltip: { control: 'text' },\n    required: { constrol: 'boolean' },\n  },\n  render: (args) => <InputStory {...args} />,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/input.stories.tsx"
    }
  ],
  "docs": "Use the input component for collecting user input in forms",
  "categories": [
    "UI",
    "Forms",
    "Inputs"
  ]
}