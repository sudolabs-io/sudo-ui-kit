{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "phone-input",
  "type": "registry:ui",
  "description": "A phone input component with country selection and formatting",
  "dependencies": [
    "react-phone-number-input@^3.4.11",
    "lucide-react@0.477.0"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/button.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/command.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/input.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/popover.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/scroll-area.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/form.json"
  ],
  "files": [
    {
      "path": "registry/ui/phone-input.tsx",
      "content": "import * as React from 'react'\nimport PhoneInputWithCountrySelect, {\n  Country,\n  DefaultInputComponentProps,\n  getCountryCallingCode,\n  Props,\n  State,\n} from 'react-phone-number-input'\nimport flags from 'react-phone-number-input/flags'\nimport { CheckIcon, ChevronDown } from 'lucide-react'\nimport { cn } from '../../lib/utils'\nimport { Button } from './button'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from './command'\nimport { Input, type InputProps } from './input'\nimport { Popover, PopoverContent, PopoverTrigger } from './popover'\nimport { ScrollArea } from './scroll-area'\nimport 'react-phone-number-input/style.css'\n\nconst NO_COUNTRY_FOUND = 'No country found.'\n\nconst FlagComponent = ({ country, countryName }: { country: Country; countryName: string }) => {\n  const Flag = flags[country]\n\n  return (\n    <span className=\"flex h-4 w-6 overflow-hidden rounded-sm bg-foreground/20\">\n      {Flag && <Flag title={countryName} />}\n    </span>\n  )\n}\n\nFlagComponent.displayName = 'FlagComponent'\n\ntype CountrySelectOption = { label: string; value: Country }\n\ninterface CountrySelectProps {\n  disabled?: boolean\n  value: Country\n  onChange: (value: Country) => void\n  options: CountrySelectOption[]\n}\n\nconst CountrySelect = ({ disabled, value, onChange, options }: CountrySelectProps) => {\n  const handleSelect = React.useCallback(\n    (country: Country) => {\n      onChange(country)\n    },\n    [onChange],\n  )\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          type=\"button\"\n          variant=\"unstyled\"\n          className={cn('flex gap-[7px] rounded-e-none rounded-s-lg px-3')}\n          disabled={disabled}\n        >\n          <FlagComponent country={value} countryName={value} />\n          <ChevronDown className={cn('-mr-2 h-4 w-4 opacity-50 text-muted-foreground')} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command>\n          <CommandList>\n            <ScrollArea className=\"h-72\">\n              <CommandInput placeholder=\"Search country...\" />\n              <CommandEmpty>{NO_COUNTRY_FOUND}</CommandEmpty>\n              <CommandGroup>\n                {options\n                  .filter((x) => x.value)\n                  .map((option) => (\n                    <CommandItem\n                      className=\"gap-2\"\n                      key={option.value}\n                      onSelect={() => handleSelect(option.value)}\n                    >\n                      <FlagComponent country={option.value} countryName={option.label} />\n                      <span className=\"flex-1 text-sm\">{option.label}</span>\n                      {option.value && (\n                        <span className=\"text-sm text-foreground/50\">\n                          {`+${getCountryCallingCode(option.value)}`}\n                        </span>\n                      )}\n                      <CheckIcon\n                        className={cn(\n                          'ml-auto h-4 w-4',\n                          option.value === value ? 'opacity-100' : 'opacity-0',\n                        )}\n                      />\n                    </CommandItem>\n                  ))}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nconst InputComponent = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, ...props }, ref) => (\n    <Input\n      ref={ref}\n      className={cn(\n        'rounded-e-lg rounded-s-none bg-transparent dark:bg-transparent w-64 !pl-1',\n        className,\n      )}\n      wrapperClassName=\"border-none\"\n      {...props}\n    />\n  ),\n)\n\nInputComponent.displayName = 'InputComponent'\n\nexport interface PhoneInputProps {\n  value?: string\n  onChange?: (value?: string) => void\n  placeholder?: string\n  defaultCountry?: Country\n  className?: string\n  disabled?: boolean\n}\n\nexport const PhoneInput = React.forwardRef<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  React.Component<Props<DefaultInputComponentProps>, State<Props<DefaultInputComponentProps>>, any>,\n  PhoneInputProps\n>(({ onChange, defaultCountry = 'SK', className, ...props }, ref) => (\n  <div className={cn('flex border border-input w-fit bg-background rounded-lg', className)}>\n    <PhoneInputWithCountrySelect\n      ref={ref}\n      international\n      defaultCountry={defaultCountry}\n      countrySelectComponent={CountrySelect}\n      inputComponent={InputComponent}\n      onChange={(newValue) => onChange?.(newValue || '')}\n      {...props}\n    />\n  </div>\n))\n\nPhoneInput.displayName = 'PhoneInput'\n",
      "type": "registry:ui",
      "target": "components/ui/phone-input.tsx"
    },
    {
      "path": "registry/ui/phone-input.stories.tsx",
      "content": "import { useForm } from 'react-hook-form'\nimport { isValidPhoneNumber } from 'react-phone-number-input'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { Meta, StoryObj } from '@storybook/react'\nimport { z } from 'zod'\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from './form'\nimport { PhoneInput, PhoneInputProps } from './phone-input'\n\nconst formSchema = z.object({\n  phoneNumber: z\n    .string()\n    .trim()\n    .min(1, 'Phone number is required')\n    .refine((value) => isValidPhoneNumber(value), 'Invalid phone number'),\n})\n\ninterface PhoneInputStoryProps extends Pick<PhoneInputProps, 'disabled'> {\n  required?: boolean\n}\n\nconst PhoneInputStory = ({ required, disabled }: PhoneInputStoryProps) => {\n  const formMethods = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    mode: 'onChange',\n  })\n  return (\n    <Form {...formMethods}>\n      <form\n        className=\"\"\n        onSubmit={(e) => {\n          e.preventDefault()\n          void formMethods.handleSubmit((formData) => console.log(formData))\n        }}\n      >\n        <FormField\n          control={formMethods.control}\n          name=\"phoneNumber\"\n          required={required}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Phone number</FormLabel>\n              <FormControl>\n                <PhoneInput\n                  placeholder=\"Phone number\"\n                  value={field.value}\n                  onChange={(value) => field.onChange(value || '')}\n                  disabled={disabled}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  )\n}\n\ntype Story = StoryObj<typeof meta>\n\nexport const Default: Story = {\n  args: {\n    required: true,\n    disabled: false,\n  },\n}\n\nconst meta: Meta<typeof PhoneInputStory> = {\n  title: 'Components/PhoneInput/PhoneInput',\n  component: PhoneInputStory,\n  argTypes: {\n    required: { type: 'boolean' },\n    disabled: { type: 'boolean' },\n  },\n  render: (args) => <PhoneInputStory {...args} />,\n  decorators: [\n    (Story, context) => {\n      document.body.classList[context.globals?.darkMode ? 'add' : 'remove']('dark') // applies dark mode to everything inside body, e.g. portals, dialogs, etc.\n      return <Story />\n    },\n  ],\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/phone-input.stories.tsx"
    }
  ],
  "docs": "Use the phone input component for international phone number input with formatting and validation",
  "categories": [
    "UI",
    "Forms",
    "Inputs"
  ]
}