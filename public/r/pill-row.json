{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pill-row",
  "type": "registry:ui",
  "description": "A horizontally scrollable row of pills with navigation buttons",
  "dependencies": [
    "@radix-ui/react-scroll-area@1.2.3",
    "lucide-react@0.477.0",
    "class-variance-authority@0.7.1"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/button.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/pill.json"
  ],
  "files": [
    {
      "path": "src/components/ui/pill-row.tsx",
      "content": "import React, { PropsWithChildren } from 'react'\nimport * as ScrollArea from '@radix-ui/react-scroll-area'\nimport { cn } from 'lib/utils'\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\nimport { Button, type ButtonProps } from './button'\n\nexport type PillRowProps = {\n  children: React.ReactElement<ButtonProps>[]\n} & React.HTMLAttributes<HTMLDivElement>\n\ninterface ScrollButtonProps extends PropsWithChildren, ButtonProps {}\n\nconst ScrollButton = ({ children, ...props }: ScrollButtonProps) => (\n  <Button\n    size=\"icon-sm\"\n    className=\"rounded-full border border-input bg-background text-foreground hover:bg-accent focus:ring-ring disabled:text-foreground\"\n    iconOnly\n    {...props}\n  >\n    {children}\n  </Button>\n)\n\nexport const PillRow = ({ children, className, ...props }: PillRowProps) => {\n  const scrollAreaRef = React.useRef<HTMLDivElement>(null)\n  const isAnimating = React.useRef(false)\n\n  const [isScrolling, setIsScrolling] = React.useState(false)\n  const [isEndOfScroll, setIsEndOfScroll] = React.useState(false)\n\n  const scroll = (direction: 'left' | 'right') => {\n    if (!scrollAreaRef.current) {\n      return\n    }\n    const { scrollWidth, offsetWidth, scrollLeft } = scrollAreaRef.current\n    const itemWidth = scrollWidth / children.length // average width of each item\n    const slideWidth = offsetWidth - itemWidth\n    const directionMultiplier = direction === 'left' ? -1 : 1\n    const scrollValue = scrollLeft + slideWidth * directionMultiplier\n\n    scrollAreaRef.current.scrollLeft = Math.min(scrollValue, scrollWidth)\n  }\n\n  const handleScroll = () => {\n    if (!isAnimating.current) {\n      window.requestAnimationFrame(() => {\n        // but if there's a problem, we can use a debounce\n        if (scrollAreaRef.current) {\n          const { scrollWidth, offsetWidth, scrollLeft } = scrollAreaRef.current\n          // This is probably called 60x/sec, but react batching might take care of it\n          setIsScrolling(scrollLeft > 0)\n          setIsEndOfScroll(scrollLeft >= scrollWidth - offsetWidth - 1)\n          isAnimating.current = false\n        }\n      })\n      isAnimating.current = true\n    }\n  }\n\n  React.useEffect(() => {\n    if (scrollAreaRef.current) {\n      const area = scrollAreaRef.current // nedeed for cleanup\n      setIsEndOfScroll(area.scrollWidth <= area.offsetWidth)\n      area.addEventListener('scroll', handleScroll)\n      window.addEventListener('resize', handleScroll)\n      return () => {\n        area.removeEventListener('scroll', handleScroll)\n        window.removeEventListener('resize', handleScroll)\n      }\n    }\n    return () => undefined\n  }, [])\n\n  // if the children change and no scroll event is triggered, we need to check if we're at the end of the scroll\n  // isScrolling should be okay, because shrinking scroll area should trigger a scroll event\n  React.useEffect(() => {\n    if (scrollAreaRef.current) {\n      const { scrollLeft, scrollWidth, offsetWidth } = scrollAreaRef.current\n      setIsEndOfScroll(scrollLeft >= scrollWidth - offsetWidth - 1)\n    }\n  }, [children])\n\n  return (\n    <div className={cn('relative my-5', className)} {...props}>\n      {isScrolling && (\n        <div className=\"absolute -left-1 top-1/2 z-10 -translate-y-1/2 rounded-full bg-background/10 p-1 drop-shadow-xl backdrop-blur-3xl lg:-left-3\">\n          <ScrollButton onClick={() => scroll('left')}>\n            <ChevronLeft size={20} />\n          </ScrollButton>\n        </div>\n      )}\n      {!isEndOfScroll && (\n        <div className=\"absolute -right-1 top-1/2 z-10 -translate-y-1/2 rounded-full bg-background/20 p-1 drop-shadow-xl backdrop-blur-3xl lg:-right-4\">\n          <ScrollButton onClick={() => scroll('right')}>\n            <ChevronRight size={20} />\n          </ScrollButton>\n        </div>\n      )}\n\n      <ScrollArea.Root className=\"relative inline-flex w-full flex-row items-center\">\n        <ScrollArea.Viewport\n          ref={scrollAreaRef}\n          className={cn('[&>div]:!flex [&>div]:gap-2 scroll-smooth snap-x w-full')}\n        >\n          {children}\n        </ScrollArea.Viewport>\n      </ScrollArea.Root>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ui/pill-row.tsx"
    },
    {
      "path": "src/components/ui/pill-row.stories.tsx",
      "content": "import { Meta, StoryObj } from '@storybook/react'\nimport { Pill } from './pill'\nimport { PillRow } from './pill-row'\n\nconst PillNames = [\n  'All',\n  'Cooking recipes',\n  'Baking recipes',\n  'Dessert recipes',\n  'Vegetarian recipes',\n  'Vegan recipes',\n  'Gluten-free recipes',\n  'Dairy-free recipes',\n  'Low-carb recipes',\n  'High-protein recipes',\n  'Quick recipes',\n  'Easy recipes',\n  'Healthy recipes',\n  'Breakfast recipes',\n  'Lunch recipes',\n  'Dinner recipes',\n  'Snack recipes',\n  'Appetizer recipes',\n  'Side dish recipes',\n  'Drink recipes',\n  'Cocktail recipes',\n  'Smoothie recipes',\n  'Soup recipes',\n  'Salad recipes',\n  'Sandwich recipes',\n  'Burger recipes',\n  'Pizza recipes',\n  'Pasta recipes',\n  'Rice recipes',\n  'Noodle recipes',\n]\n\nconst PillRowStory = () => (\n  <PillRow>\n    {PillNames.map((name) => (\n      <Pill key={name}>{name}</Pill>\n    ))}\n  </PillRow>\n)\n\ntype Story = StoryObj<typeof PillRowStory>\n\nexport const Default: Story = {\n  render: () => <PillRowStory />,\n}\n\nconst meta: Meta<typeof PillRowStory> = {\n  title: 'Components/PillRow/PillRow',\n  component: PillRowStory,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/pill-row.stories.tsx"
    }
  ],
  "docs": "Use the pill row component to display a horizontally scrollable list of pills with navigation controls",
  "categories": [
    "UI",
    "Navigation"
  ]
}