{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:ui",
  "description": "A select component with support for custom items and scrolling",
  "dependencies": [
    "@radix-ui/react-select@^2.1.4",
    "lucide-react@0.477.0",
    "react-hook-form@7.54.2",
    "@hookform/resolvers@4.1.3",
    "zod@3.24.2"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/form.json"
  ],
  "files": [
    {
      "path": "registry/ui/select.tsx",
      "content": "import * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { cn } from 'lib/utils'\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react'\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn('flex cursor-default items-center justify-center py-1', className)}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn('flex cursor-default items-center justify-center py-1', className)}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = 'popper', ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        position === 'popper' &&\n          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          'p-1',\n          position === 'popper' &&\n            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/select.tsx"
    },
    {
      "path": "registry/ui/select.stories.tsx",
      "content": "import { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { Meta, StoryObj } from '@storybook/react'\nimport { z } from 'zod'\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from './form'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './select'\n\nconst formSchema = z.object({\n  theme: z.string(),\n})\n\ntype Props = {\n  label: string\n  placeholder: string\n  description: string\n  required: boolean\n}\n\nconst SelectStory = ({ label, placeholder, description, required }: Props) => {\n  const formMethods = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      theme: undefined,\n    },\n    mode: 'onChange',\n  })\n  return (\n    <Form {...formMethods}>\n      <form\n        className=\"\"\n        onSubmit={(e) => {\n          e.preventDefault()\n          void formMethods.handleSubmit((formData) => console.log(formData))\n        }}\n      >\n        <FormField\n          required={required}\n          name=\"theme\"\n          control={formMethods.control}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{label}</FormLabel>\n              <FormControl>\n                <Select {...field} onValueChange={field.onChange}>\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue placeholder={placeholder} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"light\">Light</SelectItem>\n                    <SelectItem value=\"dark\">Dark</SelectItem>\n                    <SelectItem value=\"system\">System</SelectItem>\n                  </SelectContent>\n                </Select>\n              </FormControl>\n              <FormDescription>{description}</FormDescription>\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  )\n}\n\ntype Story = StoryObj<typeof meta>\n\nexport const Default: Story = {\n  args: {\n    label: 'Theme',\n    placeholder: 'Theme',\n    description: 'Chosen theme is saved in your browser',\n    required: true,\n  },\n}\n\nconst meta: Meta<typeof SelectStory> = {\n  title: 'Components/Select/Select',\n  component: SelectStory,\n  argTypes: {\n    label: { control: 'text' },\n    placeholder: { control: 'text' },\n    description: { control: 'text' },\n    required: { control: 'boolean' },\n  },\n  render: (args) => <SelectStory {...args} />,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/select.stories.tsx"
    }
  ],
  "docs": "Use the select component for dropdown selections with various options",
  "categories": [
    "UI",
    "Forms",
    "Inputs"
  ]
}