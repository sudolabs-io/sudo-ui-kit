{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "switch",
  "type": "registry:ui",
  "description": "A switch component with form integration support",
  "dependencies": [
    "@radix-ui/react-switch@1.1.3",
    "react-hook-form@7.54.2",
    "@hookform/resolvers@4.1.3",
    "zod@3.24.2",
    "class-variance-authority@0.7.1"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/form.json"
  ],
  "files": [
    {
      "path": "src/components/ui/switch.tsx",
      "content": "import * as React from 'react'\nimport * as SwitchPrimitives from '@radix-ui/react-switch'\nimport { cva, VariantProps } from 'class-variance-authority'\nimport { cn } from 'lib/utils'\n\nconst switchVariants = cva(\n  cn(\n    'peer inline-flex shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400 focus-visible:ring-offset-2 focus-visible:ring-offset-background',\n    'data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',\n    'disabled:cursor-not-allowed',\n  ),\n  {\n    variants: {\n      size: {\n        sm: 'h-5 w-10',\n        md: 'h-6 w-11',\n        lg: 'h-7 w-14',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n)\n\nconst switchThumbVariants = cva(\n  cn(\n    'pointer-events-none block rounded-full bg-background shadow-lg ring-0 transition-transform',\n    'data-[state=unchecked]:translate-x-0',\n  ),\n  {\n    variants: {\n      size: {\n        sm: 'h-4 w-4 data-[state=checked]:translate-x-5',\n        md: 'h-5 w-5 data-[state=checked]:translate-x-5',\n        lg: 'h-6 w-6 data-[state=checked]:translate-x-7',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n)\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> & VariantProps<typeof switchVariants>\n>(({ className, size, ...props }, ref) => (\n  <SwitchPrimitives.Root className={cn(switchVariants({ size }), className)} {...props} ref={ref}>\n    <SwitchPrimitives.Thumb className={cn(switchThumbVariants({ size }))} />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
      "type": "registry:ui",
      "target": "components/ui/switch.tsx"
    },
    {
      "path": "src/components/ui/switch.stories.tsx",
      "content": "import { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { Meta, StoryObj } from '@storybook/react'\nimport { z } from 'zod'\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from './form'\nimport { Switch } from './switch'\n\nconst formSchema = z.object({\n  terms: z.boolean().default(false).optional(),\n})\n\nconst SwitchStory = () => {\n  const formMethods = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      terms: false,\n    },\n  })\n\n  return (\n    <Form {...formMethods}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          void formMethods.handleSubmit((formData) => console.log(formData))\n        }}\n        className=\"space-y-6\"\n      >\n        <FormField\n          control={formMethods.control}\n          name=\"terms\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-start space-x-2 space-y-0 p-4\">\n              <FormControl>\n                <Switch\n                  size=\"md\"\n                  disabled={field.disabled}\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n              <div className=\"space-y-1 leading-none\">\n                <FormLabel>Accept terms and conditions</FormLabel>\n                <FormDescription>\n                  You agree to our Terms of Service and Privacy Policy.\n                </FormDescription>\n              </div>\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  )\n}\n\ntype Story = StoryObj<typeof Switch>\n\nexport const Default: Story = {\n  render: () => <SwitchStory />,\n}\n\nconst meta: Meta<typeof Switch> = {\n  title: 'Components/Switch/Switch',\n  component: Switch,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/switch.stories.tsx"
    }
  ],
  "docs": "Use the switch component for boolean input with form integration support",
  "categories": [
    "UI",
    "Forms",
    "Inputs"
  ]
}