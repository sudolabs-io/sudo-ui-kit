{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "video-player",
  "type": "registry:ui",
  "description": "A video player component with thumbnail support and custom controls",
  "dependencies": [
    "react-player@2.14.1",
    "@storybook/react@8.6.3"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/PlayIcon.json"
  ],
  "files": [
    {
      "path": "registry/ui/video-player.tsx",
      "content": "import React, { MouseEvent } from 'react'\nimport ReactPlayer, { ReactPlayerProps } from 'react-player'\nimport { PlayIcon } from 'components/icons'\n\nexport type VideoPlayerProps = Omit<ReactPlayerProps, 'onPause'> & {\n  src: string\n  thumbnail?: string\n  secondsToSeek?: number\n  onPause?: (currentTime: number) => void\n  onCaptureThumbnail?: (url: string) => void\n}\n\nexport const VideoPlayer = ({\n  src,\n  thumbnail,\n  secondsToSeek,\n  onPause,\n  onCaptureThumbnail,\n  ...playerProps\n}: VideoPlayerProps) => {\n  const [isPlaying, setIsPlaying] = React.useState(false)\n  const [isSeeked, setIsSeeked] = React.useState(false)\n\n  // Used for counting thumbnail on progress bar hover,\n  // by putting same video into hidden video player -> seek\n  // the time hovered on the progress bar -> take snapshot\n  const hiddenPlayerRef = React.useRef<ReactPlayer | null>(null)\n  const playerRef = React.useRef<ReactPlayer | null>(null)\n\n  const [snapshot, setSnapshot] = React.useState<string | null>(null)\n  const [hoverTime, setHoverTime] = React.useState<number | null>(null)\n\n  const handlePause = () => {\n    const player = playerRef.current?.getInternalPlayer()\n    if (!player) {\n      return\n    }\n\n    const seekTo = Math.round(player.currentTime as number)\n\n    if (onPause) {\n      onPause(seekTo)\n    }\n\n    setIsPlaying(false)\n  }\n\n  const captureSnapshot = (time: number) => {\n    const player = hiddenPlayerRef.current?.getInternalPlayer()\n\n    if (!player) {\n      return\n    }\n\n    const canvas = document.createElement('canvas')\n\n    player.currentTime = time\n    player.onseeked = () => {\n      const context = canvas.getContext('2d')\n      canvas.width = player.videoWidth\n      canvas.height = player.videoHeight\n      // @ts-ignore\n      context.drawImage(player, 0, 0, canvas.width, canvas.height)\n      setSnapshot(canvas.toDataURL('image/png'))\n    }\n  }\n\n  const handleProgressHover = (e: MouseEvent) => {\n    const player = playerRef.current?.getInternalPlayer()\n\n    if (!player) {\n      return\n    }\n    // Small workaround: keep the native controls visible.\n    if (isPlaying) {\n      player.pause()\n      player.play()\n    }\n\n    const progressBar = e.target\n    if (progressBar instanceof HTMLElement) {\n      const rect = progressBar.getBoundingClientRect()\n      const offsetX = e.clientX - rect.left\n      const percentage = offsetX / rect.width\n      const videoDuration = hiddenPlayerRef.current?.getDuration() ?? 0\n      const time = percentage * videoDuration\n\n      setHoverTime(time)\n      captureSnapshot(time)\n    }\n  }\n\n  return (\n    <div className=\"relative\">\n      <ReactPlayer\n        {...playerProps}\n        ref={playerRef}\n        config={{ file: { attributes: { controlsList: 'nodownload', crossOrigin: 'true' } } }}\n        controls\n        url={src}\n        playing={isPlaying}\n        onPause={handlePause}\n        onPlay={() => setIsPlaying(true)}\n        style={{ width: '100%', height: '100%' }}\n        onReady={() => {\n          if (secondsToSeek && !isSeeked) {\n            playerRef.current?.seekTo(secondsToSeek, 'seconds')\n            setIsSeeked(true)\n          }\n        }}\n        playIcon={\n          // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n          <div\n            className=\"flex h-[68px] w-[68px] items-center justify-center rounded-full bg-foreground\"\n            onClick={() => setIsPlaying(true)}\n          >\n            <PlayIcon className=\"text-background\" />\n          </div>\n        }\n        light={thumbnail}\n      />\n      <ReactPlayer\n        {...playerProps}\n        ref={hiddenPlayerRef}\n        config={{ file: { attributes: { crossOrigin: 'true' } } }}\n        url={src}\n        style={{ display: 'none' }}\n      />\n      <div className=\"absolute bottom-0 hidden w-full px-4 lg:block\">\n        {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n        <div\n          className=\"h-8 cursor-pointer bg-transparent\"\n          onClick={() => {\n            const player = playerRef.current?.getInternalPlayer()\n            if (player) {\n              player.currentTime = hoverTime\n            }\n          }}\n          onMouseMove={handleProgressHover}\n          onMouseLeave={() => {\n            setSnapshot(null)\n            setHoverTime(null)\n          }}\n        >\n          {snapshot && hoverTime && (\n            // eslint-disable-next-line @next/next/no-img-element\n            <img\n              src={snapshot}\n              alt=\"snapshot\"\n              className=\"absolute bottom-10 h-auto w-[220px] -translate-x-1/2\"\n              style={{\n                left: `${(hoverTime / (playerRef.current?.getDuration() ?? 0)) * 100}%`,\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ui/video-player.tsx"
    },
    {
      "path": "registry/ui/video-player.stories.tsx",
      "content": "import { Meta, StoryObj } from '@storybook/react'\nimport { VideoPlayer, VideoPlayerProps } from './video-player'\n\nconst VIDEO_SRC =\n  'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4'\nconst THUMBNAIL_SRC = 'https://picsum.photos/id/237/200/300'\n\ntype VideoPlayerStoryProps = Pick<VideoPlayerProps, 'src' | 'thumbnail'>\n\nconst VideoPlayerStory = ({ src, thumbnail }: VideoPlayerStoryProps) => (\n  <VideoPlayer src={src} thumbnail={thumbnail} />\n)\n\ntype Story = StoryObj<typeof VideoPlayerStory>\n\nexport const Default: Story = {\n  render: (args) => <VideoPlayerStory {...args} />,\n  args: {\n    src: VIDEO_SRC,\n    thumbnail: THUMBNAIL_SRC,\n  },\n}\n\nconst meta: Meta<typeof VideoPlayerStory> = {\n  title: 'Components/VideoPlayer/VideoPlayer',\n  component: VideoPlayerStory,\n  argTypes: {\n    src: {\n      type: 'string',\n      defaultValue: VIDEO_SRC,\n    },\n    thumbnail: { type: 'string', defaultValue: THUMBNAIL_SRC },\n  },\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/video-player.stories.tsx"
    }
  ],
  "docs": "Use the video player component for video playback with thumbnail support and custom controls",
  "categories": [
    "UI",
    "Media",
    "Video"
  ]
}