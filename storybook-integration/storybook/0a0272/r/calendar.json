{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "description": "A calendar component with single, range and multiple date selection",
  "dependencies": [
    "react-day-picker@^8.10.1",
    "@radix-ui/react-icons@1.3.2",
    "date-fns@^3.0.0"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/button.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/select.json"
  ],
  "files": [
    {
      "path": "src/components/ui/calendar.tsx",
      "content": "import * as React from 'react'\nimport { DayPicker, DropdownProps } from 'react-day-picker'\nimport { ChevronLeftIcon, ChevronRightIcon } from '@radix-ui/react-icons'\nimport { cn } from 'lib/utils'\nimport { buttonVariants } from './button'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './select'\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\n/**\n * This component is modified version of shadcn/ui's Calendar component.\n * It includes the changes from this PR: https://github.com/shadcn-ui/ui/pull/1680\n * which adds selects for month and year.\n */\nconst Calendar = ({\n  className,\n  classNames,\n  showOutsideDays = true,\n  defaultMonth,\n  ...props\n}: CalendarProps & {\n  onChange?: React.ChangeEventHandler<HTMLSelectElement>\n}) => {\n  const selectedMonth = props.mode === 'single' ? defaultMonth || props.selected : defaultMonth\n\n  const handleCalendarChange = (\n    value: string | number,\n    e: React.ChangeEventHandler<HTMLSelectElement>,\n  ) => {\n    const event = {\n      target: {\n        value: String(value),\n      },\n    } as React.ChangeEvent<HTMLSelectElement>\n    e(event)\n  }\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      defaultMonth={selectedMonth}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-3',\n        caption_start: 'is-start',\n        caption_between: 'is-between',\n        caption_end: 'is-end',\n        caption: 'flex justify-center pt-1 relative items-center gap-1',\n        caption_label:\n          'flex h-7 text-sm font-medium justify-center items-center grow [.is-multiple_&]:flex',\n        caption_dropdowns: 'flex justify-center grow dropdowns pl-7 pr-8 gap-0.5',\n        multiple_months: 'is-multiple',\n        vhidden: 'hidden [.is-between_&]:flex [.is-end_&]:flex [.is-start.is-end_&]:hidden',\n        nav: \"flex items-center [&:has([name='previous-month'])]:order-first [&:has([name='next-month'])]:order-last\",\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-6 bg-transparent p-0 opacity-50 hover:opacity-100',\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex justify-center',\n        head_cell: 'text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2 justify-center',\n        cell: cn(\n          'relative p-0 size-8 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md text-foreground',\n          props.mode === 'range'\n            ? '[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md'\n            : '[&:has([aria-selected])]:rounded-md',\n        ),\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-8 w-8 p-0 font-normal aria-selected:opacity-100',\n        ),\n        day_range_start: 'day-range-start',\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside:\n          'day-outside text-muted-foreground opacity-50  aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        root: 'bg-popover w-fit rounded-md border border-border shadow-md',\n        ...classNames,\n      }}\n      components={{\n        // eslint-disable-next-line react/no-unstable-nested-components\n        IconLeft: () => <ChevronLeftIcon className=\"size-4 text-foreground\" />,\n        // eslint-disable-next-line react/no-unstable-nested-components\n        IconRight: () => <ChevronRightIcon className=\"size-4 text-foreground\" />,\n        // eslint-disable-next-line react/no-unstable-nested-components\n        Dropdown: ({ ...dropdownProps }) => {\n          const isYearsDropdown = dropdownProps.name === 'years'\n          const childrenArray = isYearsDropdown\n            ? React.Children.toArray(dropdownProps.children).reverse()\n            : React.Children.toArray(dropdownProps.children)\n\n          return (\n            <Select\n              {...dropdownProps}\n              onValueChange={(value) => {\n                if (dropdownProps.onChange) {\n                  handleCalendarChange(value, dropdownProps.onChange)\n                }\n              }}\n              value={String(dropdownProps.value)}\n              disabled={props.disabled === true} // disabled might be also array of disabled dates\n            >\n              <SelectTrigger\n                className={cn(\n                  'h-7 font-medium [.is-between_&]:hidden [.is-end_&]:hidden [.is-start.is-end_&]:flex text-foreground',\n                )}\n              >\n                <SelectValue placeholder={dropdownProps?.caption}>\n                  {dropdownProps?.caption}\n                </SelectValue>\n              </SelectTrigger>\n              <SelectContent\n                className={cn(\n                  'scrolling-auto min-w-[var(--radix-popper-anchor-width)] overflow-y-auto bg-popover',\n                  !isYearsDropdown && 'max-h-[var(--radix-popper-available-height);]',\n                )}\n              >\n                {dropdownProps.children &&\n                  childrenArray.map((child) => {\n                    const { value, children } = (child as React.ReactElement<DropdownProps>).props\n\n                    return (\n                      <SelectItem\n                        value={String(value)}\n                        className=\"min-w-[var(--radix-popper-anchor-width)] pr-7 data-[state=checked]:bg-accent\"\n                        key={`datepicker-select-${value}`}\n                      >\n                        {children}\n                      </SelectItem>\n                    )\n                  })}\n              </SelectContent>\n            </Select>\n          )\n        },\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = 'Calendar'\n\nexport { Calendar }\n",
      "type": "registry:ui",
      "target": "components/ui/calendar.tsx"
    },
    {
      "path": "src/components/ui/calendar.stories.tsx",
      "content": "import { useState } from 'react'\nimport { DateRange } from 'react-day-picker'\nimport { Meta, StoryObj } from '@storybook/react'\nimport { addDays } from 'date-fns'\nimport { Calendar, CalendarProps } from './calendar'\n\nconst LOWEST_YEAR = 1995\nconst HIGHEST_YEAR = 2065\n\ntype CalendarStoryProps = Pick<\n  CalendarProps,\n  'showOutsideDays' | 'fromYear' | 'toYear' | 'disabled'\n>\n\nconst CalendarSingleStory = (args: CalendarStoryProps) => {\n  const [date, setDate] = useState<Date | undefined>(new Date())\n\n  return (\n    <Calendar\n      mode=\"single\"\n      captionLayout=\"dropdown-buttons\"\n      selected={date}\n      onSelect={setDate}\n      {...args}\n    />\n  )\n}\n\nconst CalendarRangeStory = (args: CalendarStoryProps) => {\n  const [dateRange, setDateRange] = useState<DateRange | undefined>({\n    from: undefined,\n    to: undefined,\n  })\n\n  return (\n    <Calendar\n      mode=\"range\"\n      captionLayout=\"dropdown-buttons\"\n      selected={dateRange}\n      onSelect={setDateRange}\n      {...args}\n    />\n  )\n}\n\nconst CalendarMultipleStory = (args: CalendarStoryProps) => {\n  const [dates, setDates] = useState<Date[] | undefined>(undefined)\n\n  return (\n    <Calendar\n      mode=\"multiple\"\n      captionLayout=\"dropdown-buttons\"\n      selected={dates}\n      onSelect={setDates}\n      {...args}\n    />\n  )\n}\n\ntype Story = StoryObj<typeof Calendar>\n\nconst commonArgs = {\n  showOutsideDays: true,\n  fromYear: LOWEST_YEAR,\n  toYear: HIGHEST_YEAR,\n  disabled: [addDays(new Date(), 1), addDays(new Date(), 2)],\n}\n\nconst commonArgTypes = {\n  showOutsideDays: {\n    control: { type: 'boolean' as const },\n  },\n  fromYear: {\n    control: { type: 'number' as const },\n  },\n  toYear: {\n    control: { type: 'number' as const },\n  },\n  disabled: {\n    control: { type: 'object' as const },\n  },\n}\n\nexport const Single: Story = {\n  render: (args: CalendarStoryProps) => <CalendarSingleStory {...args} />,\n  args: commonArgs,\n  argTypes: commonArgTypes,\n}\n\nexport const Range: Story = {\n  render: (args: CalendarStoryProps) => <CalendarRangeStory {...args} />,\n  args: commonArgs,\n  argTypes: commonArgTypes,\n}\n\nexport const Multiple: Story = {\n  render: (args: CalendarStoryProps) => <CalendarMultipleStory {...args} />,\n  args: commonArgs,\n  argTypes: commonArgTypes,\n}\n\nconst meta: Meta<typeof Calendar> = {\n  title: 'Components/Calendar/Calendar',\n  component: Calendar,\n} as Meta\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/calendar.stories.tsx"
    }
  ],
  "docs": "Use the calendar component for date picking with single, range, or multiple selection modes",
  "categories": [
    "UI",
    "Date",
    "Forms"
  ]
}