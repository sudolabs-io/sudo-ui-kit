{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-select",
  "type": "registry:ui",
  "description": "Multi-select component with search, select all, and customizable options",
  "dependencies": [
    "lucide-react@0.477.0"
  ],
  "registryDependencies": [
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/utils.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/badge.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/button.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/command.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/popover.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/separator.json",
    "https://sudolabs-io.github.io/sudo-ui-kit/public/r/form.json"
  ],
  "files": [
    {
      "path": "src/components/ui/multi-select.tsx",
      "content": "import * as React from 'react'\nimport { cn } from 'lib/utils'\nimport { CheckIcon, ChevronDown, WandSparkles, XCircle, XIcon } from 'lucide-react'\nimport { Badge } from './badge'\nimport { Button } from './button'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from './command'\nimport { Popover, PopoverContent, PopoverTrigger } from './popover'\nimport { Separator } from './separator'\n\nconst NO_RESULTS_FOUND = 'No results found.'\nconst SELECT_ALL = '(Select All)'\nconst CLEAR = 'Clear'\nconst CLOSE = 'Close'\n\n/**\n * Props for MultiSelect component\n */\ninterface MultiSelectProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * An array of option objects to be displayed in the multi-select component.\n   * Each option object has a label, value, and an optional icon.\n   */\n  options: {\n    /** The text to display for the option. */\n    label: string\n    /** The unique value associated with the option. */\n    value: string\n    /** Optional icon component to display alongside the option. */\n    icon?: React.ComponentType<{ className?: string }>\n  }[]\n\n  /**\n   * Callback function triggered when the selected values change.\n   * Receives an array of the new selected values.\n   */\n  onValueChange: (value: string[]) => void\n\n  /** The default selected values when the component mounts. */\n  defaultValue?: string[]\n\n  /**\n   * Placeholder text to be displayed when no values are selected.\n   * Optional, defaults to \"Select options\".\n   */\n  placeholder?: string\n\n  /**\n   * Animation duration in seconds for the visual effects (e.g., bouncing badges).\n   * Optional, defaults to 0 (no animation).\n   */\n  animation?: number\n\n  /**\n   * Maximum number of items to display. Extra selected items will be summarized.\n   * Optional, defaults to 3.\n   */\n  maxCount?: number\n\n  /**\n   * The modality of the popover. When set to true, interaction with outside elements\n   * will be disabled and only popover content will be visible to screen readers.\n   * Optional, defaults to false.\n   */\n  modalPopover?: boolean\n\n  /**\n   * If true, renders the multi-select component as a child of another component.\n   * Optional, defaults to false.\n   */\n  asChild?: boolean\n\n  /**\n   * Additional class names to apply custom styles to the multi-select component.\n   * Optional, can be used to add custom styles.\n   */\n  className?: string\n}\n\nexport const MultiSelect = React.forwardRef<HTMLButtonElement, MultiSelectProps>(\n  (\n    {\n      options,\n      onValueChange,\n      defaultValue = [],\n      placeholder = 'Select options',\n      animation = 0,\n      maxCount = 3,\n      modalPopover = false,\n      asChild = false,\n      className,\n      disabled = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const [selectedValues, setSelectedValues] = React.useState<string[]>(defaultValue)\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false)\n    const [isAnimating, setIsAnimating] = React.useState(false)\n\n    const handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        setIsPopoverOpen(true)\n      } else if (event.key === 'Backspace' && !event.currentTarget.value) {\n        const newSelectedValues = [...selectedValues]\n        newSelectedValues.pop()\n        setSelectedValues(newSelectedValues)\n        onValueChange(newSelectedValues)\n      }\n    }\n\n    const toggleOption = (option: string) => {\n      const newSelectedValues = selectedValues.includes(option)\n        ? selectedValues.filter((value) => value !== option)\n        : [...selectedValues, option]\n      setSelectedValues(newSelectedValues)\n      onValueChange(newSelectedValues)\n    }\n\n    const handleClear = () => {\n      setSelectedValues([])\n      onValueChange([])\n    }\n\n    const handleTogglePopover = () => {\n      setIsPopoverOpen((prev) => !prev)\n    }\n\n    const clearExtraOptions = () => {\n      const newSelectedValues = selectedValues.slice(0, maxCount)\n      setSelectedValues(newSelectedValues)\n      onValueChange(newSelectedValues)\n    }\n\n    const toggleAll = () => {\n      if (selectedValues.length === options.length) {\n        handleClear()\n      } else {\n        const allValues = options.map((option) => option.value)\n        setSelectedValues(allValues)\n        onValueChange(allValues)\n      }\n    }\n\n    return (\n      <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen} modal={modalPopover}>\n        <PopoverTrigger asChild={asChild} disabled={disabled}>\n          <Button\n            ref={ref}\n            {...props}\n            onClick={handleTogglePopover}\n            className={cn(\n              'flex w-full p-1 rounded-md border min-h-10 h-auto items-center justify-between bg-background hover:bg-background [&_svg]:pointer-events-auto',\n              className,\n            )}\n            disabled={disabled}\n          >\n            {selectedValues.length > 0 ? (\n              <div className=\"flex w-full items-center justify-between\">\n                <div className=\"flex flex-wrap items-center\">\n                  {selectedValues.slice(0, maxCount).map((value) => {\n                    const option = options.find((o) => o.value === value)\n                    const IconComponent = option?.icon\n                    return (\n                      <Badge\n                        key={value}\n                        className=\"m-1 border-foreground/10 bg-card text-foreground hover:bg-card/80\"\n                        shape=\"pill\"\n                      >\n                        {IconComponent && <IconComponent className=\"h-4 w-4\" />}\n                        {option?.label}\n                        <XCircle\n                          className=\"h-4 w-4 cursor-pointer\"\n                          onClick={(event) => {\n                            event.stopPropagation()\n                            toggleOption(value)\n                          }}\n                        />\n                      </Badge>\n                    )\n                  })}\n                  {selectedValues.length > maxCount && (\n                    <Badge\n                      className={cn(\n                        'bg-transparent text-foreground border-foreground/1 hover:bg-transparent',\n                      )}\n                      shape=\"pill\"\n                    >\n                      {`+ ${selectedValues.length - maxCount} more`}\n                      <XCircle\n                        className=\"ml-2 h-4 w-4 cursor-pointer\"\n                        onClick={(event) => {\n                          event.stopPropagation()\n                          clearExtraOptions()\n                        }}\n                      />\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <XIcon\n                    className=\"mx-2 h-4 cursor-pointer text-muted-foreground\"\n                    onClick={(event) => {\n                      event.stopPropagation()\n                      handleClear()\n                    }}\n                  />\n                  <Separator orientation=\"vertical\" className=\"flex h-full min-h-6\" />\n                  <ChevronDown className=\"mx-2 h-4 cursor-pointer text-muted-foreground\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"mx-auto flex w-full items-center justify-between\">\n                <span className=\"mx-3 text-sm font-normal text-foreground\">{placeholder}</span>\n                <ChevronDown className=\"mx-2 h-4 cursor-pointer text-muted-foreground\" />\n              </div>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"w-auto p-0 shadow-md\"\n          align=\"start\"\n          onEscapeKeyDown={() => setIsPopoverOpen(false)}\n        >\n          <Command>\n            <CommandInput placeholder=\"Search...\" onKeyDown={handleInputKeyDown} />\n            <CommandList>\n              <CommandEmpty>{NO_RESULTS_FOUND}</CommandEmpty>\n              <CommandGroup>\n                <CommandItem\n                  key=\"all\"\n                  onSelect={toggleAll}\n                  className=\"cursor-pointer rounded-md hover:bg-accent\"\n                >\n                  <div\n                    className={cn(\n                      'flex h-4 w-4 items-center rounded-sm justify-center border border-primary',\n                      selectedValues.length === options.length\n                        ? 'bg-primary text-primary-foreground'\n                        : 'opacity-50 [&_svg]:invisible',\n                    )}\n                  >\n                    <CheckIcon className=\"h-4 w-4 rounded-sm\" />\n                  </div>\n                  <span>{SELECT_ALL}</span>\n                </CommandItem>\n                {options.map((option) => {\n                  const isSelected = selectedValues.includes(option.value)\n                  return (\n                    <CommandItem\n                      key={option.value}\n                      onSelect={() => toggleOption(option.value)}\n                      className=\"cursor-pointer rounded-md hover:bg-accent\"\n                    >\n                      <div\n                        className={cn(\n                          'flex h-4 w-4 items-center rounded-sm justify-center border border-primary',\n                          isSelected\n                            ? 'bg-primary text-primary-foreground'\n                            : 'opacity-50 [&_svg]:invisible',\n                        )}\n                      >\n                        <CheckIcon className=\"h-4 w-4\" />\n                      </div>\n                      {option.icon && <option.icon className=\"h-4 w-4 text-muted-foreground\" />}\n                      <span>{option.label}</span>\n                    </CommandItem>\n                  )\n                })}\n              </CommandGroup>\n              <CommandSeparator />\n              <CommandGroup>\n                <div className=\"flex items-center justify-between\">\n                  {selectedValues.length > 0 && (\n                    <>\n                      <CommandItem\n                        onSelect={handleClear}\n                        className=\"flex-1 cursor-pointer justify-center\"\n                      >\n                        {CLEAR}\n                      </CommandItem>\n                      <Separator orientation=\"vertical\" className=\"flex h-full min-h-6\" />\n                    </>\n                  )}\n                  <CommandItem\n                    onSelect={() => setIsPopoverOpen(false)}\n                    className=\"max-w-full flex-1 cursor-pointer justify-center\"\n                  >\n                    {CLOSE}\n                  </CommandItem>\n                </div>\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n        {animation > 0 && selectedValues.length > 0 && (\n          <WandSparkles\n            className={cn(\n              'cursor-pointer my-2 text-foreground bg-background w-3 h-3',\n              isAnimating ? '' : 'text-muted-foreground',\n            )}\n            onClick={() => setIsAnimating(!isAnimating)}\n          />\n        )}\n      </Popover>\n    )\n  },\n)\n\nMultiSelect.displayName = 'MultiSelect'\n",
      "type": "registry:ui",
      "target": "components/ui/multi-select.tsx"
    },
    {
      "path": "src/components/ui/multi-select.stories.tsx",
      "content": "import { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { Meta, StoryObj } from '@storybook/react'\nimport { Cat, Dog, Fish, Rabbit, Turtle } from 'lucide-react'\nimport { z } from 'zod'\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from './form'\nimport { MultiSelect } from './multi-select'\n\nconst Options = [\n  {\n    value: 'next.js',\n    label: 'Next.js',\n    icon: Dog,\n  },\n  {\n    value: 'sveltekit',\n    label: 'SvelteKit',\n    icon: Cat,\n  },\n  {\n    value: 'nuxt.js',\n    label: 'Nuxt.js',\n    icon: Turtle,\n  },\n  {\n    value: 'remix',\n    label: 'Remix',\n    icon: Rabbit,\n  },\n  {\n    value: 'astro',\n    label: 'Astro',\n    icon: Fish,\n  },\n]\n\nconst formSchema = z.object({\n  framework: z.string(),\n})\n\ntype Props = {\n  label: string\n  placeholder: string\n  description: string\n  required: boolean\n}\n\nconst MultiSelectStory = ({ label, placeholder, description, required }: Props) => {\n  const formMethods = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      framework: undefined,\n    },\n    mode: 'onChange',\n  })\n  return (\n    <Form {...formMethods}>\n      <form\n        className=\"\"\n        onSubmit={(e) => {\n          e.preventDefault()\n          void formMethods.handleSubmit((formData) => console.log(formData))\n        }}\n      >\n        <FormField\n          required={required}\n          name=\"framework\"\n          control={formMethods.control}\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel className=\"text-foreground\">{label}</FormLabel>\n              <FormControl>\n                <MultiSelect\n                  {...field}\n                  onValueChange={field.onChange}\n                  options={Options}\n                  placeholder={placeholder}\n                />\n              </FormControl>\n              <FormDescription>{description}</FormDescription>\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  )\n}\n\ntype Story = StoryObj<typeof meta>\n\nexport const Default: Story = {\n  args: {\n    label: 'Framework',\n    placeholder: 'Framework',\n    description: 'Choose your favorite framework',\n    required: true,\n  },\n}\n\nconst meta: Meta<typeof MultiSelectStory> = {\n  title: 'Components/MultiSelect/MultiSelect',\n  component: MultiSelectStory,\n  argTypes: {\n    label: { control: 'text' },\n    placeholder: { control: 'text' },\n    description: { control: 'text' },\n    required: { control: 'boolean' },\n  },\n  render: (args) => <MultiSelectStory {...args} />,\n}\n\nexport default meta\n",
      "type": "registry:ui",
      "target": "components/ui/multi-select.stories.tsx"
    }
  ],
  "docs": "Use the multi-select component for selecting multiple options from a list with search functionality",
  "categories": [
    "UI",
    "Forms",
    "Inputs"
  ]
}